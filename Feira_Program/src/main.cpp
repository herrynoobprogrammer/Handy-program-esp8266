#include <ESP8266HTTPClient.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include <Adafruit_MLX90614.h>

Adafruit_MLX90614 mlx = Adafruit_MLX90614();

MAX30105 particleSensor;
#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 64 
#define OLED_RESET     -1 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
#define NUMFLAKES     10 
#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
#define button D5

const unsigned char myBitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xe0, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xf8, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xf8, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xc0, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3e, 0x7f, 0x80, 0x00, 0x3f, 0x8f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0x07, 0x07, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0x07, 0x0f, 0xfe, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0x06, 0x1f, 0xff, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xfe, 0x0e, 0x1f, 0xff, 0xc0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xfe, 0x0f, 0x0f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xfc, 0x1f, 0x87, 0xfc, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xfc, 0x3f, 0xe0, 0x00, 0x7e, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xf8, 0xff, 0xe0, 0x01, 0xff, 0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xe1, 0xff, 0xf0, 0x01, 0xff, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc3, 0xff, 0xf8, 0x03, 0xff, 0xf0, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x07, 0xff, 0xfe, 0x0f, 0xff, 0xf8, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xf0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xc0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xfe, 0x03, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf8, 0x0f, 0xfc, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x83, 0xfc, 0x7f, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xef, 0xfc, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x7c, 0x07, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x7c, 0x0f, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x7c, 0xff, 0x80, 0xdf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x7c, 0x01, 0x80, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x60, 0x7c, 0x01, 0x80, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xef, 0xfd, 0x80, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char myEifra [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xf8, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xf8, 0xc5, 0xc0, 0x92, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xf8, 0xf5, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xf8, 0xfb, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xf8, 0xfb, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xf8, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xf0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xfc, 0x00, 0x00, 0xff, 0x00, 0x7f, 0xf8, 0x00, 0x07, 0x00, 0x3f, 0xc0, 0x00, 0x00, 
  0x00, 0x07, 0xfc, 0x00, 0x00, 0xff, 0x00, 0xff, 0xf8, 0x7f, 0x1f, 0x01, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x07, 0xfc, 0x00, 0x01, 0xff, 0x01, 0xff, 0xf8, 0x7f, 0x3e, 0x07, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x07, 0xfc, 0x00, 0x01, 0xff, 0x01, 0xff, 0xf8, 0x7f, 0x7e, 0x0f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0x81, 0xff, 0x01, 0xff, 0x10, 0x7f, 0xfe, 0x1f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0x81, 0xfe, 0x03, 0xfe, 0x00, 0x7f, 0xfe, 0x3f, 0xe3, 0xff, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0x81, 0xfe, 0x03, 0xfc, 0x00, 0xff, 0xfe, 0x7f, 0xc1, 0xff, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x01, 0xfe, 0x03, 0xfc, 0x00, 0xff, 0xfc, 0x07, 0x81, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x03, 0xfe, 0x3f, 0xff, 0xf0, 0xff, 0xc0, 0x00, 0x01, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0x03, 0xfe, 0x3f, 0xff, 0xe0, 0xff, 0x80, 0x01, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xf8, 0x00, 0x03, 0xfe, 0x3f, 0xff, 0xe0, 0xff, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x0f, 0xf8, 0x00, 0x03, 0xfc, 0x3f, 0xff, 0xe1, 0xff, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x03, 0xfc, 0x3f, 0xff, 0xe1, 0xff, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x07, 0xfc, 0x0f, 0xfc, 0x01, 0xfe, 0x00, 0xff, 0xc3, 0xfc, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x00, 0x07, 0xfc, 0x07, 0xf8, 0x01, 0xfe, 0x00, 0xff, 0x83, 0xfc, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x87, 0xfc, 0x0f, 0xf8, 0x01, 0xfe, 0x01, 0xff, 0x03, 0xfc, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x87, 0xfc, 0x0f, 0xf0, 0x01, 0xfe, 0x01, 0xff, 0x07, 0xfc, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0x87, 0xf8, 0x0f, 0xf0, 0x03, 0xfe, 0x01, 0xff, 0x0f, 0xfc, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x87, 0xf8, 0x0f, 0xf0, 0x03, 0xfc, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x8f, 0xf8, 0x0f, 0xf0, 0x03, 0xfc, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x8f, 0xf8, 0x0f, 0xf0, 0x03, 0xfc, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0x0f, 0xf8, 0x1f, 0xe0, 0x03, 0xfc, 0x00, 0xff, 0xf7, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x03, 0xfc, 0x00, 0x7f, 0xc7, 0xf8, 0x00, 0x00, 
  0x00, 0x03, 0x30, 0x00, 0x13, 0x30, 0x1f, 0xef, 0x80, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0x30, 0x00, 0x33, 0x30, 0x1f, 0xef, 0x80, 0x01, 0x00, 0x00, 0x18, 0x00, 0x40, 0x00, 
  0x00, 0x06, 0x63, 0x87, 0x37, 0xbe, 0x1f, 0xe6, 0x1c, 0x73, 0xe6, 0xc7, 0x11, 0xc7, 0x99, 0x00, 
  0x00, 0x07, 0xe6, 0xc9, 0xb7, 0x3e, 0x1f, 0xe6, 0x36, 0xfb, 0xe6, 0xcd, 0xb3, 0x6c, 0x9a, 0x00, 
  0x00, 0x07, 0xef, 0xc7, 0xb2, 0x66, 0x3f, 0xc6, 0x7e, 0xc3, 0x66, 0xd9, 0xb6, 0x6f, 0x9a, 0x00, 
  0x00, 0x06, 0x6c, 0x19, 0x36, 0x66, 0x3f, 0xc6, 0x60, 0xc3, 0x66, 0xd9, 0xb6, 0x6c, 0x1c, 0x00, 
  0x00, 0x06, 0x6f, 0x9b, 0x67, 0x64, 0x3f, 0xc6, 0x7c, 0xf2, 0x6c, 0xdf, 0x37, 0xcf, 0x8c, 0x00, 
  0x00, 0x04, 0x43, 0x19, 0x23, 0x64, 0x00, 0x04, 0x38, 0x62, 0x44, 0x8e, 0x21, 0x8f, 0x88, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xb8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define MAX_BRIGHTNESS 255
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
uint16_t irBuffer[100]; //infrared LED sensor data
uint16_t redBuffer[100];  //red LED sensor data
#else
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
#endif
int32_t bufferLength; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid

unsigned long previousMillis = 0;  //will store last time LED was blinked
const long period = 500; 
unsigned long previousMillis1 = 0;  //will store last time LED was blinked
const long period1 = 4000; 

const char *ssid     = "ojok digawe11";
const char *password = "kintilll";
int mode=0;
byte readLED = D4;
byte pulseLED = A0;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "asia.pool.ntp.org", 28200, 60000);
String weekDays[7]={"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String months[12]={"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

void time(){
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime(); 
  String formattedTime = timeClient.getFormattedTime();
  Serial.print("Formatted Time: ");
  Serial.println(formattedTime); 
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();   
  int currentSecond = timeClient.getSeconds(); 
  
  String weekDay = weekDays[timeClient.getDay()]; 
  struct tm *ptm = gmtime ((time_t *)&epochTime); 
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon+1;
  String currentMonthName = months[currentMonth-1];
  int currentYear = ptm->tm_year+1900;
  String currentDate = String(currentYear) + "-" + String(currentMonth) + "-" + String(monthDay);
  display.display();
  display.clearDisplay();
  display.setTextSize(3);            
  display.setTextColor(WHITE);       
  display.setCursor(20,0);             
  display.print(currentHour);display.print(":");display.println(currentMinute);

  display.setTextSize(1);            
  display.setTextColor(WHITE);       
  display.setCursor(5,30);             
  display.print(weekDay);display.print("/");display.print(monthDay);display.print("-");display.print(currentMonth);display.print("-");display.println(currentYear);
  display.setTextSize(1);            
  display.setTextColor(WHITE);       
  display.setCursor(20,40);             
  display.print("Surabaya  35'");
  Serial.print("Current date: ");
  Serial.println(currentDate);
  Serial.println("");
  }

  void time1()
  {
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime(); 
  String formattedTime = timeClient.getFormattedTime();
  Serial.print("Formatted Time: ");
  Serial.println(formattedTime); 
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();   
  int currentSecond = timeClient.getSeconds(); 
  
  String weekDay = weekDays[timeClient.getDay()]; 
  struct tm *ptm = gmtime ((time_t *)&epochTime); 
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon+1;
  String currentMonthName = months[currentMonth-1];
  int currentYear = ptm->tm_year+1900;
  String currentDate = String(currentYear) + "-" + String(currentMonth) + "-" + String(monthDay);
    display.display();
    display.clearDisplay();
    display.setTextSize(3);            
    display.setTextColor(WHITE);       
    display.setCursor(20,0);             
    display.print(currentHour);display.print(":");display.println(currentMinute);
    display.setTextSize(1);            
    display.setTextColor(WHITE);       
    display.setCursor(0,30);             
    display.print("Sedang Mengukur....");
    display.setTextSize(1);            
    display.setTextColor(WHITE);       
    display.setCursor(0,40);
    display.print("Temp: ");display.print(mlx.readObjectTempC());
    display.setTextColor(WHITE);       
    display.setCursor(0,55);
    display.print("HR");display.print(heartRate, DEC);display.print("Bpm");display.print(" SpO2:");display.print(spo2, DEC);display.print("%"); 
  }

void Displayconnect()
{
    display.display();
    delay(100);//OLED
    display.clearDisplay();
    display.setTextSize(1);            
    display.setTextColor(SSD1306_WHITE);   
    display.setCursor(0,0);             
    display.println(F("Connecting to wifi.."));
    display.setTextSize(3);            
    display.setTextColor(WHITE);       
    display.setCursor(10,15);             
    display.print("HAND-Y");
    display.setTextSize(1);            
    display.setTextColor(WHITE);       
    display.setCursor(10,50);             
    display.print("By EIFRA smart tech");
 }
  
void setup() {
  Serial.begin(115200);
  pinMode(button, INPUT_PULLUP);
  pinMode(readLED, OUTPUT);
  pinMode(pulseLED, OUTPUT);
  mlx.begin(); 
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); 
  }
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  display.clearDisplay(); //for Clearing the display
  display.drawBitmap(27, 0, myBitmap, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  display.clearDisplay(); //for Clearing the display
  display.drawBitmap(0, 0, myEifra, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
  delay(500);
  Serial.print(".");
  Displayconnect();
  }
  timeClient.begin();
  timeClient.setTimeOffset(25200);//25200

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1);
  }
  byte ledBrightness = 60; //Options: 0=Off to 255=50mA
  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

      
      
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
    Serial.print(F("red="));
    Serial.print(redBuffer[i], DEC);
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
    display.display();
    delay(100);//OLED
    display.clearDisplay();
    display.setTextSize(1);            
    display.setTextColor(SSD1306_WHITE);   
    display.setCursor(0,0);             
    display.println(F("Getting Parameters"));
    display.setTextSize(3);            
    display.setTextColor(WHITE);       
    display.setCursor(20,20);             
    display.print(irBuffer[i], DEC);
  }
}
void pb_mode(){
    if (digitalRead(button)==0)
    mode=1;
 // else
  //mode=0;
}
void loop() {
awal:
pb_mode();
 // while (mode != 0){ 
maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
        particleSensor.check(); //Check the sensor for new data
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
 
     
unsigned long currentMillis = millis(); // store the current time
  if (currentMillis - previousMillis >= period){ // check if 1000ms passed
   previousMillis = currentMillis;
   digitalWrite(readLED, !digitalRead(readLED));
    Serial.print(F(", SPO2=  "));
    Serial.println(spo2, DEC);
    Serial.print(F(", HR=  "));
    Serial.println(heartRate, DEC);
    Serial.print(F(", Temperature=  "));
    Serial.println(mlx.readObjectTempC(),DEC);
   if(mode != 0){
    time1();
    Serial.print("*C\tObject = "); Serial.print(mlx.readObjectTempC()); Serial.println("*C");
    //save the data to mysql, access the php file to write
        HTTPClient http;
        String url = "http://192.168.43.189/coba_nodemcu/mage2020/data_gelang.php?hr="+String(heartRate)+"&spo2="+String(spo2)+"&suhu="+String(mlx.readObjectTempC());
        Serial.println(url);     
        http.begin(url);
       
        //GET method
        int httpCode = http.GET();
        if(httpCode > 0)
        {
          Serial.printf("[HTTP] GET...code: %d\n", httpCode);
          if(httpCode == HTTP_CODE_OK)
          {
              String payload = http.getString();
              Serial.println(payload);
          }
       }
       else
       {
            Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
       }
          http.end();
   }
   else{
     time();
   }
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
  }
mode=0;
pb_mode();
goto awal;
}